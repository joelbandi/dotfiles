#!/bin/sh

# Add the SSH and HTTPS paths for each repository to protect
PROTECTED_URL_PREFIXES="
https://github.com/appfolio/
git@github.com:appfolio/
"
# Add remote ref paths to protect (branches, tags, etc)
PROTECTED_REFS="
refs/heads/master
refs/heads/fail_test
"
DEBUG=0  # Disable DEBUG mode by setting to 0


debug() {
    # Output messages if DEBUG mode is enabled.
    if [ $DEBUG -ne 0 ]; then
        echo "DEBUG: $*"
    fi
}
do_exit() {
    # Always exit with an error when DEBUG mode is enabled.
    if [ $DEBUG -ne 0 ]; then
        echo "DEBUG: Would have exited with status: $1"
        exit 1
    fi
    exit $1
}

# $1 is the remote's name, this is irrelevant
# $2 is the remote's URL, this is important
if [ $# -ne 2 ]; then
    # Handle only known states. There should be only two arguments.
    echo "Unexpected number of arugments: $#"
    echo "Arguments: $*"
    do_exit 1
fi

# Exit successfully if we're not dealing with a protected URL
is_protected=0
for url_prefix in $PROTECTED_URL_PREFIXES; do
    if [ "${2::${#url_prefix}}" == "$url_prefix" ]; then
        debug "Found protected url: $2 (matches: $url_prefix)"
        is_protected=1
        break
    fi
done
if [ $is_protected -eq 0 ]; then
    debug "$2 is not protected"
    do_exit 0  # The remote's URL is not protected
fi

PREV_IFS=$IFS
IFS=' '
while read local_ref local_sha remote_ref remote_sha extra; do
    IFS=$PREV_IFS
    if [ "$extra" != "" ]; then
        # Handle only known states. There should be only 4 tokens.
        echo "Unexpected extra token: $extra"
        do_exit 1
    fi
    # Exit if the remote_ref is protected.
    for ref in $PROTECTED_REFS; do
        if [ "$remote_ref" == "$ref" ]; then
            echo "[PRE-PUSH] Preventing push to: $ref (bypass using: --no-verify)"
            do_exit 1
        fi
    done
    debug "$remote_ref is not protected"
    IFS=' '
done

do_exit 0
